// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/message_service.proto

package LIFXMaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	SetLocationLabel(ctx context.Context, in *SetLocationLabelRequest, opts ...grpc.CallOption) (*SetLocationLabelResponse, error)
	SetGroupLabel(ctx context.Context, in *SetGroupLabelRequest, opts ...grpc.CallOption) (*SetGroupLabelResponse, error)
	SetDeviceLabel(ctx context.Context, in *SetDeviceLabelRequest, opts ...grpc.CallOption) (*SetDeviceLabelResponse, error)
	SetColor(ctx context.Context, in *SetColorRequest, opts ...grpc.CallOption) (*SetColorResponse, error)
	SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*SetPowerResponse, error)
	Strobe(ctx context.Context, in *StrobeRequest, opts ...grpc.CallOption) (*StrobeResponse, error)
	ColorCycle(ctx context.Context, in *ColorCycleRequest, opts ...grpc.CallOption) (*ColorCycleResponse, error)
	Twinkle(ctx context.Context, in *TwinkleRequest, opts ...grpc.CallOption) (*TwinkleResponse, error)
	Visualizer(ctx context.Context, in *VisualizerRequest, opts ...grpc.CallOption) (*VisualizerResponse, error)
	Theater(ctx context.Context, in *TheaterRequest, opts ...grpc.CallOption) (*TheaterResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	out := new(GetDevicesResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetLocationLabel(ctx context.Context, in *SetLocationLabelRequest, opts ...grpc.CallOption) (*SetLocationLabelResponse, error) {
	out := new(SetLocationLabelResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/SetLocationLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetGroupLabel(ctx context.Context, in *SetGroupLabelRequest, opts ...grpc.CallOption) (*SetGroupLabelResponse, error) {
	out := new(SetGroupLabelResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/SetGroupLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetDeviceLabel(ctx context.Context, in *SetDeviceLabelRequest, opts ...grpc.CallOption) (*SetDeviceLabelResponse, error) {
	out := new(SetDeviceLabelResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/SetDeviceLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetColor(ctx context.Context, in *SetColorRequest, opts ...grpc.CallOption) (*SetColorResponse, error) {
	out := new(SetColorResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/SetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*SetPowerResponse, error) {
	out := new(SetPowerResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/SetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Strobe(ctx context.Context, in *StrobeRequest, opts ...grpc.CallOption) (*StrobeResponse, error) {
	out := new(StrobeResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/Strobe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ColorCycle(ctx context.Context, in *ColorCycleRequest, opts ...grpc.CallOption) (*ColorCycleResponse, error) {
	out := new(ColorCycleResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/ColorCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Twinkle(ctx context.Context, in *TwinkleRequest, opts ...grpc.CallOption) (*TwinkleResponse, error) {
	out := new(TwinkleResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/Twinkle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Visualizer(ctx context.Context, in *VisualizerRequest, opts ...grpc.CallOption) (*VisualizerResponse, error) {
	out := new(VisualizerResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/Visualizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Theater(ctx context.Context, in *TheaterRequest, opts ...grpc.CallOption) (*TheaterResponse, error) {
	out := new(TheaterResponse)
	err := c.cc.Invoke(ctx, "/message.DeviceService/Theater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	SetLocationLabel(context.Context, *SetLocationLabelRequest) (*SetLocationLabelResponse, error)
	SetGroupLabel(context.Context, *SetGroupLabelRequest) (*SetGroupLabelResponse, error)
	SetDeviceLabel(context.Context, *SetDeviceLabelRequest) (*SetDeviceLabelResponse, error)
	SetColor(context.Context, *SetColorRequest) (*SetColorResponse, error)
	SetPower(context.Context, *SetPowerRequest) (*SetPowerResponse, error)
	Strobe(context.Context, *StrobeRequest) (*StrobeResponse, error)
	ColorCycle(context.Context, *ColorCycleRequest) (*ColorCycleResponse, error)
	Twinkle(context.Context, *TwinkleRequest) (*TwinkleResponse, error)
	Visualizer(context.Context, *VisualizerRequest) (*VisualizerResponse, error)
	Theater(context.Context, *TheaterRequest) (*TheaterResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedDeviceServiceServer) SetLocationLabel(context.Context, *SetLocationLabelRequest) (*SetLocationLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationLabel not implemented")
}
func (UnimplementedDeviceServiceServer) SetGroupLabel(context.Context, *SetGroupLabelRequest) (*SetGroupLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupLabel not implemented")
}
func (UnimplementedDeviceServiceServer) SetDeviceLabel(context.Context, *SetDeviceLabelRequest) (*SetDeviceLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceLabel not implemented")
}
func (UnimplementedDeviceServiceServer) SetColor(context.Context, *SetColorRequest) (*SetColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColor not implemented")
}
func (UnimplementedDeviceServiceServer) SetPower(context.Context, *SetPowerRequest) (*SetPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}
func (UnimplementedDeviceServiceServer) Strobe(context.Context, *StrobeRequest) (*StrobeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strobe not implemented")
}
func (UnimplementedDeviceServiceServer) ColorCycle(context.Context, *ColorCycleRequest) (*ColorCycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColorCycle not implemented")
}
func (UnimplementedDeviceServiceServer) Twinkle(context.Context, *TwinkleRequest) (*TwinkleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Twinkle not implemented")
}
func (UnimplementedDeviceServiceServer) Visualizer(context.Context, *VisualizerRequest) (*VisualizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Visualizer not implemented")
}
func (UnimplementedDeviceServiceServer) Theater(context.Context, *TheaterRequest) (*TheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Theater not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetLocationLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetLocationLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/SetLocationLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetLocationLabel(ctx, req.(*SetLocationLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetGroupLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetGroupLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/SetGroupLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetGroupLabel(ctx, req.(*SetGroupLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetDeviceLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetDeviceLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/SetDeviceLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetDeviceLabel(ctx, req.(*SetDeviceLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/SetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetColor(ctx, req.(*SetColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/SetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetPower(ctx, req.(*SetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Strobe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrobeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Strobe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/Strobe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Strobe(ctx, req.(*StrobeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ColorCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColorCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ColorCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/ColorCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ColorCycle(ctx, req.(*ColorCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Twinkle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwinkleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Twinkle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/Twinkle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Twinkle(ctx, req.(*TwinkleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Visualizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisualizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Visualizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/Visualizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Visualizer(ctx, req.(*VisualizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Theater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Theater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.DeviceService/Theater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Theater(ctx, req.(*TheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _DeviceService_GetDevices_Handler,
		},
		{
			MethodName: "SetLocationLabel",
			Handler:    _DeviceService_SetLocationLabel_Handler,
		},
		{
			MethodName: "SetGroupLabel",
			Handler:    _DeviceService_SetGroupLabel_Handler,
		},
		{
			MethodName: "SetDeviceLabel",
			Handler:    _DeviceService_SetDeviceLabel_Handler,
		},
		{
			MethodName: "SetColor",
			Handler:    _DeviceService_SetColor_Handler,
		},
		{
			MethodName: "SetPower",
			Handler:    _DeviceService_SetPower_Handler,
		},
		{
			MethodName: "Strobe",
			Handler:    _DeviceService_Strobe_Handler,
		},
		{
			MethodName: "ColorCycle",
			Handler:    _DeviceService_ColorCycle_Handler,
		},
		{
			MethodName: "Twinkle",
			Handler:    _DeviceService_Twinkle_Handler,
		},
		{
			MethodName: "Visualizer",
			Handler:    _DeviceService_Visualizer_Handler,
		},
		{
			MethodName: "Theater",
			Handler:    _DeviceService_Theater_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message_service.proto",
}
