name: Build and Release Executables

on:
  push:
    tags:
      - 'v*.*.*'
env:
  APP_NAME: lifxmaster
  GO_VERSION: '1.22'
  NODE_VERSION: '18'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'backend/go.mod'
        cache-dependency-path: "**/go.sum"


    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: "**/package-lock.json"

    - name: Build Go binary
      run: |
        mkdir -p dist
        make build-go OS=${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}

    - name: Build and package Electron app
      run: |
        cd web
        npm install
        npm run build:${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}
        mv dist/${{ env.APP_NAME }}-* ../dist/

    - name: List directory contents
      run: |
        pwd
        ls
  
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}
        path: dist/*
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */${{ env.APP_NAME }}-*.exe
          */${{ env.APP_NAME }}-*.dmg
          */${{ env.APP_NAME }}-*.deb
          */${{ env.APP_NAME }}-*.AppImage
          */${{ env.APP_NAME }}-*.zip
          */${{ env.APP_NAME }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

