// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/message_service.proto" (package "message", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DeviceService } from "./message_service";
import type { TheaterResponse } from "./message_service";
import type { TheaterRequest } from "./message_service";
import type { VisualizerResponse } from "./message_service";
import type { VisualizerRequest } from "./message_service";
import type { TwinkleResponse } from "./message_service";
import type { TwinkleRequest } from "./message_service";
import type { ColorCycleResponse } from "./message_service";
import type { ColorCycleRequest } from "./message_service";
import type { StrobeResponse } from "./message_service";
import type { StrobeRequest } from "./message_service";
import type { SetPowerResponse } from "./message_service";
import type { SetPowerRequest } from "./message_service";
import type { SetColorResponse } from "./message_service";
import type { SetColorRequest } from "./message_service";
import type { SetDeviceLabelResponse } from "./message_service";
import type { SetDeviceLabelRequest } from "./message_service";
import type { SetGroupLabelResponse } from "./message_service";
import type { SetGroupLabelRequest } from "./message_service";
import type { SetLocationLabelResponse } from "./message_service";
import type { SetLocationLabelRequest } from "./message_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetDevicesResponse } from "./message_service";
import type { GetDevicesRequest } from "./message_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The service definition
 *
 * @generated from protobuf service message.DeviceService
 */
export interface IDeviceServiceClient {
    /**
     * @generated from protobuf rpc: GetDevices(message.GetDevicesRequest) returns (message.GetDevicesResponse);
     */
    getDevices(input: GetDevicesRequest, options?: RpcOptions): UnaryCall<GetDevicesRequest, GetDevicesResponse>;
    /**
     * @generated from protobuf rpc: SetLocationLabel(message.SetLocationLabelRequest) returns (message.SetLocationLabelResponse);
     */
    setLocationLabel(input: SetLocationLabelRequest, options?: RpcOptions): UnaryCall<SetLocationLabelRequest, SetLocationLabelResponse>;
    /**
     * @generated from protobuf rpc: SetGroupLabel(message.SetGroupLabelRequest) returns (message.SetGroupLabelResponse);
     */
    setGroupLabel(input: SetGroupLabelRequest, options?: RpcOptions): UnaryCall<SetGroupLabelRequest, SetGroupLabelResponse>;
    /**
     * @generated from protobuf rpc: SetDeviceLabel(message.SetDeviceLabelRequest) returns (message.SetDeviceLabelResponse);
     */
    setDeviceLabel(input: SetDeviceLabelRequest, options?: RpcOptions): UnaryCall<SetDeviceLabelRequest, SetDeviceLabelResponse>;
    /**
     * @generated from protobuf rpc: SetColor(message.SetColorRequest) returns (message.SetColorResponse);
     */
    setColor(input: SetColorRequest, options?: RpcOptions): UnaryCall<SetColorRequest, SetColorResponse>;
    /**
     * @generated from protobuf rpc: SetPower(message.SetPowerRequest) returns (message.SetPowerResponse);
     */
    setPower(input: SetPowerRequest, options?: RpcOptions): UnaryCall<SetPowerRequest, SetPowerResponse>;
    /**
     * @generated from protobuf rpc: Strobe(message.StrobeRequest) returns (message.StrobeResponse);
     */
    strobe(input: StrobeRequest, options?: RpcOptions): UnaryCall<StrobeRequest, StrobeResponse>;
    /**
     * @generated from protobuf rpc: ColorCycle(message.ColorCycleRequest) returns (message.ColorCycleResponse);
     */
    colorCycle(input: ColorCycleRequest, options?: RpcOptions): UnaryCall<ColorCycleRequest, ColorCycleResponse>;
    /**
     * @generated from protobuf rpc: Twinkle(message.TwinkleRequest) returns (message.TwinkleResponse);
     */
    twinkle(input: TwinkleRequest, options?: RpcOptions): UnaryCall<TwinkleRequest, TwinkleResponse>;
    /**
     * @generated from protobuf rpc: Visualizer(message.VisualizerRequest) returns (message.VisualizerResponse);
     */
    visualizer(input: VisualizerRequest, options?: RpcOptions): UnaryCall<VisualizerRequest, VisualizerResponse>;
    /**
     * @generated from protobuf rpc: Theater(message.TheaterRequest) returns (message.TheaterResponse);
     */
    theater(input: TheaterRequest, options?: RpcOptions): UnaryCall<TheaterRequest, TheaterResponse>;
}
/**
 * The service definition
 *
 * @generated from protobuf service message.DeviceService
 */
export class DeviceServiceClient implements IDeviceServiceClient, ServiceInfo {
    typeName = DeviceService.typeName;
    methods = DeviceService.methods;
    options = DeviceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetDevices(message.GetDevicesRequest) returns (message.GetDevicesResponse);
     */
    getDevices(input: GetDevicesRequest, options?: RpcOptions): UnaryCall<GetDevicesRequest, GetDevicesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDevicesRequest, GetDevicesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetLocationLabel(message.SetLocationLabelRequest) returns (message.SetLocationLabelResponse);
     */
    setLocationLabel(input: SetLocationLabelRequest, options?: RpcOptions): UnaryCall<SetLocationLabelRequest, SetLocationLabelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetLocationLabelRequest, SetLocationLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetGroupLabel(message.SetGroupLabelRequest) returns (message.SetGroupLabelResponse);
     */
    setGroupLabel(input: SetGroupLabelRequest, options?: RpcOptions): UnaryCall<SetGroupLabelRequest, SetGroupLabelResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetGroupLabelRequest, SetGroupLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetDeviceLabel(message.SetDeviceLabelRequest) returns (message.SetDeviceLabelResponse);
     */
    setDeviceLabel(input: SetDeviceLabelRequest, options?: RpcOptions): UnaryCall<SetDeviceLabelRequest, SetDeviceLabelResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDeviceLabelRequest, SetDeviceLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetColor(message.SetColorRequest) returns (message.SetColorResponse);
     */
    setColor(input: SetColorRequest, options?: RpcOptions): UnaryCall<SetColorRequest, SetColorResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetColorRequest, SetColorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPower(message.SetPowerRequest) returns (message.SetPowerResponse);
     */
    setPower(input: SetPowerRequest, options?: RpcOptions): UnaryCall<SetPowerRequest, SetPowerResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPowerRequest, SetPowerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Strobe(message.StrobeRequest) returns (message.StrobeResponse);
     */
    strobe(input: StrobeRequest, options?: RpcOptions): UnaryCall<StrobeRequest, StrobeResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<StrobeRequest, StrobeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ColorCycle(message.ColorCycleRequest) returns (message.ColorCycleResponse);
     */
    colorCycle(input: ColorCycleRequest, options?: RpcOptions): UnaryCall<ColorCycleRequest, ColorCycleResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ColorCycleRequest, ColorCycleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Twinkle(message.TwinkleRequest) returns (message.TwinkleResponse);
     */
    twinkle(input: TwinkleRequest, options?: RpcOptions): UnaryCall<TwinkleRequest, TwinkleResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TwinkleRequest, TwinkleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Visualizer(message.VisualizerRequest) returns (message.VisualizerResponse);
     */
    visualizer(input: VisualizerRequest, options?: RpcOptions): UnaryCall<VisualizerRequest, VisualizerResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<VisualizerRequest, VisualizerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Theater(message.TheaterRequest) returns (message.TheaterResponse);
     */
    theater(input: TheaterRequest, options?: RpcOptions): UnaryCall<TheaterRequest, TheaterResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<TheaterRequest, TheaterResponse>("unary", this._transport, method, opt, input);
    }
}
